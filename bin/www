#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const mongoose = require('mongoose');
const mongo = require('../config/techmeme-backend-config').mongo;
const debug = require('debug')('techmeme-backend:server');
const http = require('http');

const PRODUCTION = process.env.NODE_ENV === 'production';

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind } requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
/**
 * 处理错误
 */
function debugEr(er) {
  debug(`find an error : ${er}`);
}
/**
 * Listen on provided port, on all network interfaces.
 */

let mongodb = 'mongodb://127.0.0.1:27017/techmeme';

if (PRODUCTION) {
  mongodb = `mongodb://${mongo.user}:${mongo.password}@${mongo.host}:${mongo.port}/${mongo.database}?authSource=${mongo.authSource}`;
}

mongoose.Promise = global.Promise;
mongoose
  .connect(mongodb, {
    useMongoClient: true,
  })
  .then(() => {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    debug('server process starting');
  })
  .catch(debugEr);
